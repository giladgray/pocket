(function() {
  var MAX_FUEL, bestScore, canvas, distance, highscoreEl, mouse, mouseFuel, newBall, pocket, random, score, scoreEl, scoreOne, scoreZero, start;

  random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return Math.floor(Math.random() * (max - min)) + min;
  };

  distance = function(a, b) {
    var dx, dy;
    dx = a.x - b.x;
    dy = a.y - b.y;
    return Math.sqrt(dx * dx + dy * dy);
  };

  pocket = new Pocket;

  pocket.component('context-2d', function(cmp, _arg) {
    var canvas, resize;
    canvas = _arg.canvas;
    cmp.canvas = document.querySelector(canvas || '#canvas');
    cmp.g2d = cmp.canvas.getContext('2d');
    cmp.center = {
      x: 0,
      y: 0
    };
    window.addEventListener('resize', resize = function() {
      cmp.canvas.width = document.body.clientWidth;
      cmp.canvas.height = document.body.clientHeight;
      cmp.width = cmp.canvas.width;
      return cmp.height = cmp.canvas.height;
    });
    return resize();
  });

  pocket.key({
    'context-2d': {
      width: 'auto',
      height: 'auto'
    }
  });

  canvas = pocket.getData('context-2d');

  pocket.component('mouse-state', function(cmp, _arg) {
    var origin, target, _ref, _ref1;
    target = _arg.target, origin = _arg.origin;
    if (origin == null) {
      origin = {};
    }
    cmp.origin = {
      x: (_ref = origin.x) != null ? _ref : 0,
      y: (_ref1 = origin.y) != null ? _ref1 : 0
    };
    cmp.target = typeof target === 'string' ? document.querySelector(target) : document.body;
    cmp.buttons = {
      left: false,
      middle: false,
      right: false
    };
    cmp.cursor = {
      x: null,
      y: null
    };
    cmp.inWindow = true;
    cmp.target.addEventListener('mousemove', function(e) {
      cmp.cursor.x = e.clientX - cmp.origin.x;
      return cmp.cursor.y = e.clientY - cmp.origin.x;
    });
    cmp.target.addEventListener('mousedown', function(e) {
      if (e.which === 1) {
        cmp.buttons.left = true;
      }
      if (e.which === 2) {
        cmp.buttons.middle = true;
      }
      if (e.which === 3) {
        return cmp.buttons.right = true;
      }
    });
    cmp.target.addEventListener('mouseup', function(e) {
      if (e.which === 1) {
        cmp.buttons.left = false;
      }
      if (e.which === 2) {
        cmp.buttons.middle = false;
      }
      if (e.which === 3) {
        return cmp.buttons.right = false;
      }
    });
    cmp.target.addEventListener('mouseenter', function(e) {
      return cmp.inWindow = true;
    });
    return cmp.target.addEventListener('mouseleave', function(e) {
      return cmp.inWindow = false;
    });
  });

  pocket.key({
    'mouse-state': null
  });

  mouse = pocket.getData('mouse-state');

  pocket.component('position', {
    x: 0,
    y: 0
  });

  pocket.component('velocity', {
    x: 0,
    y: 0
  });

  pocket.component('circle', {
    radius: 30,
    color: 'cornflowerblue'
  });

  MAX_FUEL = 5000;

  mouseFuel = 0;

  newBall = function() {
    mouseFuel = MAX_FUEL;
    return pocket.key({
      position: {
        x: random(canvas.width),
        y: random(canvas.height)
      },
      velocity: {
        speed: 0
      },
      circle: null
    });
  };

  newBall();

  pocket.systemForEach('move-ball', ['position', 'velocity'], function(pocket, key, pos, vel) {
    var angle;
    if (!mouse.inWindow) {
      return;
    }
    angle = Math.atan2(mouse.cursor.y - pos.y, mouse.cursor.x - pos.x);
    vel.x = vel.speed * Math.cos(angle);
    vel.y = vel.speed * Math.sin(angle);
    if (mouse.buttons.left && mouseFuel > 0) {
      vel.x *= -1 / 4;
      vel.y *= -1 / 4;
      mouseFuel -= pocket.delta;
    } else {
      vel.speed += 1 / 20;
      mouseFuel += pocket.delta / 3;
      mouseFuel = Math.min(mouseFuel, MAX_FUEL);
    }
    pos.x += vel.x;
    return pos.y += vel.y;
  });

  pocket.systemForEach('respawn-ball', ['position', 'circle'], function(pocket, key, pos, _arg) {
    var radius;
    radius = _arg.radius;
    if (distance(mouse.cursor, pos) < radius) {
      pocket.destroyKey(key);
      scoreZero();
      return newBall();
    }
  });

  pocket.system('clear-canvas', [], function(pocket) {
    var g2d, height, width;
    g2d = canvas.g2d, width = canvas.width, height = canvas.height;
    return g2d.clearRect(0, 0, width, height);
  });

  pocket.systemForEach('draw-ball', ['position', 'circle'], function(pocket, key, pos, circle) {
    var g2d;
    g2d = canvas.g2d;
    g2d.beginPath();
    g2d.fillStyle = circle.color;
    g2d.arc(pos.x, pos.y, circle.radius, 0, Math.PI * 2);
    g2d.closePath();
    return g2d.fill();
  });

  pocket.system('draw-fuel', [], function(pocket) {
    var g2d, height, width;
    g2d = canvas.g2d, width = canvas.width, height = canvas.height;
    g2d.beginPath();
    g2d.fillStyle = 'orange';
    g2d.fillRect(0, height - 30, mouseFuel / MAX_FUEL * width, 30);
    return g2d.closePath();
  });

  score = 0;

  bestScore = 0;

  scoreEl = document.querySelector('.scores .current');

  highscoreEl = document.querySelector('.scores .best');

  scoreOne = function(amt) {
    if (amt == null) {
      amt = 1;
    }
    return scoreEl.textContent = score += amt;
  };

  scoreZero = function() {
    if (score > bestScore) {
      highscoreEl.textContent = bestScore = score;
    }
    return scoreEl.textContent = score = 0;
  };

  pocket.system('update-score', [], function(pocket) {
    if (!mouse.inWindow) {
      return;
    }
    return scoreOne(Math.floor(pocket.delta || 0));
  });

  start = function(time) {
    pocket.tick(time);
    return window.requestAnimationFrame(start);
  };

  document.addEventListener('DOMContentLoaded', function() {
    return start();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,